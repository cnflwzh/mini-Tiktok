// Code generated by hertz generator.

package publish

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"google.golang.org/protobuf/proto"
	"mini-Tiktok/biz/middleware/jwt"
	"mini-Tiktok/biz/model/publish"
	"mini-Tiktok/biz/repository"
	"mini-Tiktok/biz/utils"
)

// PublishAction .
// @router /douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	formFile, err := c.FormFile("data")
	token := c.FormValue("token")
	title := c.FormValue("title")
	file, err := utils.ReadFile(formFile)

	userId, err := jwt.ParseToken(string(token))
	if err != nil {
		utils.SendErrorResponse(c, 20001, "token 解析失败")
		hlog.Error("token 解析失败", err)
	}
	isMP4Video := utils.IsMp4Video(file)
	if !isMP4Video {
		utils.SendErrorResponse(c, 20002, "上传的视频格式不是 MP4")
		hlog.Error("上传的视频格式不是 MP4", err)
		return
	}
	videoUrl, coverUrl, err := utils.VideoUploadToKodo(file, userId)
	if err != nil {
		utils.SendErrorResponse(c, 20003, "上传视频失败")
		hlog.Error("上传视频失败", err)
		return
	}
	_, err = repository.AddVideo(userId, videoUrl, coverUrl, string(title))
	if err != nil {
		utils.SendErrorResponse(c, 20004, "数据库返回错误")
		hlog.Error("数据库出错", err)
		return
	}

	resp := &publish.DouyinPublishActionResponse{
		StatusCode: proto.Int32(0),
		StatusMsg:  proto.String(""),
	}
	*resp.StatusCode = 0
	*resp.StatusMsg = "发布成功"

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(publish.DouyinPublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
