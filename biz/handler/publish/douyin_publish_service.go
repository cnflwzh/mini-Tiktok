// Code generated by hertz generator.

package publish

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	publish "mini-Tiktok/biz/model/publish"
)

// PublishAction .
// @router /douyin/publish/action [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	file, err := c.FormFile("data")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	hlog.Info("file: ", file.Filename)

	/**
	处理流程：
	1、服务端收到请求
	2、生成封面图
	3、上传视频
	4、上传封面图
	5、获取视频链接和封面图链接
	6、将视频完整信息存入数据库
	*/
	//videoUrl, coverUrl, err := utils.VideoUploadToKodo(file, *req.UserId)
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}
	//// 将视频信息存入数据库
	//hlog.Info("videoUrl: ", videoUrl)
	//hlog.Info("coverUrl: ", coverUrl)

	resp := new(publish.DouyinPublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(publish.DouyinPublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
