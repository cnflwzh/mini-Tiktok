// Code generated by hertz generator.

package relation

import (
	"context"
	"mini-Tiktok/biz/repository"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"mini-Tiktok/biz/model/social/relation"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.DouyinRelationActionResponse)
	err = repository.Follow(req.GetUserId(), req.GetToUserId())
	if err != nil {
		*resp.StatusCode = int32(-1)
		*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "关注或取关用户" + strconv.FormatInt(req.GetToUserId(), 10) + "失败"
		c.JSON(consts.StatusOK, resp)
		return
	}
	*resp.StatusCode = int32(0)
	*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "关注或取关用户" + strconv.FormatInt(req.GetToUserId(), 10) + "成功"

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.DouyinRelationFollowListResponse)

	resp.UserList, err = repository.GetFollowList(req.GetUserId())
	if err != nil {
		*resp.StatusCode = int32(-1)
		*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "浏览关注列表失败"
		c.JSON(consts.StatusOK, resp)
		return
	}
	*resp.StatusCode = int32(0)
	*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "正在浏览关注列表"

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.DouyinRelationFollowerListResponse)
	resp.UserList, err = repository.GetFollowerList(req.GetUserId())
	if err != nil {
		*resp.StatusCode = int32(-1)
		*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "浏览粉丝列表失败"
		c.JSON(consts.StatusOK, resp)
		return
	}
	*resp.StatusCode = int32(0)
	*resp.StatusMsg = "用户" + strconv.FormatInt(req.GetUserId(), 10) + "正在浏览粉丝列表"

	c.JSON(consts.StatusOK, resp)
}

// RelationFriendList .
// @router /douyin/relation/friend/list [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.DouyinRelationFriendListResponse)

	c.JSON(consts.StatusOK, resp)
}
